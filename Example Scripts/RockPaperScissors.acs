using System;
using Examath.Core.Plugin;
using Examath.Core.Enviorment;
using System.Windows.Documents;
using System.Windows.Input;
using System.Threading.Tasks;

namespace RockPaperScissors
{
    class EXE : IPlugin, ISetup, IExecuteAsync
    {
    	private Section schs;
    	private Run schr;
    	private int i = 0;
    	private int msch = 0;
    	private int usch = 0;
    	private rps u = rps.n;
    	private bool fair = true;
    	Random rnd = new();
    
    	public void Setup(Env e)
    	{
    		Log l = e.StartLog("Let's play Rock-Paper-Scissors!");
    		l.Out("Execute this script (EXE or [Alt+E] key),"
    		+ "then hold down either the [R], [P] or [S] key for rock, paper and scissors respectivley.");
    		l.Out("Whatever you do, don't hold down the [X] key!");
    		schs = new();
    		schr = new();
    		schs.Blocks.Add(new Paragraph(schr));
    	}
    
        public async Task Execute(Env e)
        {
        	i++;
        	Run r = new("Game");
        	Paragraph p = new(r);
        	p.TextAlignment = System.Windows.TextAlignment.Center;
        	e.OutBlock(new Section(p));
        	for(int j = 0; j < 20; j++)
        	{
        		r.Text = "Me: " + mstr(j).PadRight(35) + ("You: " + ustr()).PadLeft(35);
        		await Task.Delay(100);
        	}
        	
        	rps m = (rps)rnd.Next(1,4);
        	
        	if (!fair && u != rps.n)
        	{
        		if (u == rps.Rock) m = rps.Paper;
        		else if (u == rps.Paper) m = rps.Scissors;
        		else m = rps.Rock;
        	}
        	
        	r.Text = "Me: " + m.ToString().PadRight(35)  
        		+ ("You: " + ((u != rps.n) ? u.ToString() : "_______")).PadLeft(35);
        		
        	if (u == rps.n)
        	{        		
        		if (fair) r.Text += "\nYou need to hold down either the [R], [P] or [S] keyboard keys whilst we're playing a round";
        		else r.Text += "\n" + rm("Forgot the rules?", "Can't you use a keyboard?", "That's not allowed!", "Can't you read instructions?", "Can't you play rock-paper-scissors?", "You're bad at this", "Can't you play properly?", "Don't you know how to use a keyboard?", "Pathetic", "The instructions are above! Go back and read them!", "Seriously?");
        	}
        	else if (u == m) 
        	{
        		if (fair) r.Text += "\nTie";
        		else r.Text += "You cheated :(";
        	}
        	else if (
        		(u == rps.Rock && m == rps.Paper) || 
        		(u == rps.Paper && m == rps.Scissors) || 
        		(u == rps.Scissors && m == rps.Rock))
        	{
        		if (fair) r.Text += "\nI won! " + rm("Want to try again?", "Try again", "Better luck next time :)", "Don't worry, this game is all luck", "Lucky me, I guess", "Thank you RNG", "Oh well, it's just a game", "Honestly, I'm not cheating", "It's just luck");
        		else r.Text += "\n" + rm("You LOSE!", "You're a loser!", "You lost!", "You lose, as always.", "You never win anyways.", "GIVE UP! You always lose.", "Why do you continue?", "L-O-S-E-R", "Ha ha ha!", "Ha ha you lost!", "Ha!!!", "Ha ha you're a loser!", "Ha ha you never win", "LOL What a pathetic attempt", "Pathetic loser!", "Loooooooser!!!");
        		msch++;
        	}
        	else
        	{
        		if (fair) r.Text += "\nYou won! " + rm("Well Done", ":)", "Congratulations", "Well Done :)", "You deserve a pat on the back.", "See, you've got this", "See, I'm not cheating", "See, I'm playing fair", "It's not your skill though, thank the RNG", "It's you're lucky second", "Fair game :)", "Winning feels nice, doesn't it?", "Well done human", "Well done user");
        		else r.Text += "You cheated :(";
        		usch++;
        	}
        	
        	
        	schr.Text = $"Score after round {i}: {Sch2()}";
        	u = rps.n;
        	e.OutBlock(schs);
        }
        
        private string Sch1(int n) 
        {
        	return (n > 0) ? n.ToString() : "nil";
        }
        
        private string Sch2()
        {
        	if (msch == usch) return $"Tied {Sch1(msch)} - {Sch1(usch)}";
        	else if (msch > usch) return $"I'm winning {Sch1(msch)} - {Sch1(usch)}";
        	else return $"You're winning {Sch1(usch)} - {Sch1(msch)}";
    	}
        
        private string mstr(int j)
        {
        	if (j < 10) return $"Rock ...";
        	else if (j < 20) return $"Rock, Paper ...";
        	else return $"Rock, Paper, Scissors";
    	}
    	
    	private string ustr() 
    	{
    		if (Keyboard.IsKeyDown(Key.R)) u = rps.Rock;
    		else if (Keyboard.IsKeyDown(Key.P)) u = rps.Paper;
    		else if (Keyboard.IsKeyDown(Key.S)) u = rps.Scissors;
    		
    		if (Keyboard.IsKeyDown(Key.X)) fair = false;
    		
    		if (u == rps.n) return "(Press [R], [P] or [S])";
    		else return u.ToString();
    	}
    	
    	private string rm(params string[] input)
    	{
    		if (input.Length == 0) return "";
    		return input[rnd.Next(0, input.Length)];
    	}
    }
    
    public enum rps
    {
    	n,
    	Rock,
    	Paper,
    	Scissors
    }
}
#scriptmetadatabegin
<?xml version="1.0" encoding="utf-16"?>
<ScriptMetadata xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Imports>
    <Import>C:\Program Files\dotnet\shared\Microsoft.NETCore.App\6.0.13\System.Private.CoreLib.dll</Import>
    <Import>C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.13\PresentationFramework.dll</Import>
    <Import>C:\Users\paulj\Documents\Applets\WPF\Line\Scripter\bin\Debug\net6.0-windows\Examath.Core.dll</Import>
    <Import>C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.13\PresentationCore.dll</Import>
    <Import>C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.13\WindowsBase.dll</Import>
    <Import>C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App\6.0.13\PresentationCore.dll</Import>
    <Import>C:\Program Files\dotnet\shared\Microsoft.NETCore.App\6.0.13\System.Runtime.dll</Import>
  </Imports>
</ScriptMetadata>